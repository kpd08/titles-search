{"version":3,"sources":["constants.ts","api.ts","components/layout.tsx","components/loader.tsx","components/production-entry.tsx","components/search-box.tsx","components/error-box.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_URL","process","API_KEY","fetchProductions","searchQuery","a","page","axios","get","encodeURIComponent","data","Error","productions","Search","totalResults","Number","parseInt","Layout","children","className","data-testid","Loader","xmlns","fill","viewBox","d","LoaderOverlay","ProductionEntry","production","src","Poster","alt","Title","Year","SearchBox","props","ErrorBox","App","useState","setProductions","searchValue","setSearchValue","isLoading","setIsLoading","errorMsg","setErrorMsg","length","apiFetchProductions","errorMessage","message","debouncedFetchProductions","useCallback","debounce","hasResults","useMemo","placeholder","value","onChange","event","target","map","imdbID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b701ada8.chunk.js","sourcesContent":["export const API_URL = process.env.REACT_APP_API_BASE_URL!;\nexport const API_KEY = process.env.REACT_APP_API_KEY!;\nexport const FALLBACK_ERROR_MSG = 'Nous sommes désolé, something went wrong';\n","import axios from 'axios';\nimport { API_KEY, API_URL } from './constants';\n\nexport const fetchProductions = async (\n  searchQuery: string,\n  page: number = 1\n): Promise<{ productions: Array<Production>; totalResults: number }> => {\n  try {\n    const { data } = await axios.get<SearchResponse<Production>>(\n      `${API_URL}?apikey=${API_KEY}&s=${encodeURIComponent(\n        searchQuery\n      )}&page=${page}`\n    );\n    if (data.Error) {\n      throw new Error(data.Error);\n    }\n    return {\n      productions: data.Search || [],\n      totalResults: Number.parseInt(data.totalResults!, 10) || 0,\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import * as React from 'react';\n\nexport const Layout = ({\n  children,\n}: React.PropsWithChildren<React.ReactNode>) => {\n  return (\n    <div className=\"w-full min-h-screen\" data-testid=\"layout\">\n      <main className=\"mx-auto max-w-screen-lg p-4\">{children}</main>\n    </div>\n  );\n};\n","export const Loader = () => {\n  return (\n    <div className=\"w-12 h-12\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        className=\"animate-spin\"\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport const LoaderOverlay = () => {\n  return (\n    <div\n      className=\"fixed top-0 left-0 w-screen h-screen z-50 flex items-center justify-center bg-gray-200 bg-opacity-50\"\n      data-testid=\"loader-overlay\"\n    >\n      <Loader />\n    </div>\n  );\n};\n","type Props = {\n  production: Production;\n};\n\nexport const ProductionEntry = ({ production }: Props) => {\n  return (\n    <div\n      className=\"flex flex-col items-center md:flex-row md:items-start my-2 p-4 border-b-2 border-gray-400 border-opacity-50\"\n      data-testid=\"production-details\"\n    >\n      <img\n        src={production.Poster}\n        className=\"object-cover rounded-full justify-self-center w-40 h-40 md:h-56 md:rounded-md shadow-lg md:mx-4\"\n        alt={production.Title}\n      />\n      <div className=\"flex flex-col items-center md:items-start my-4 md:my-0\">\n        <h1 className=\"text-lg md:text-3xl text-center\">{production.Title}</h1>\n        <span className=\"text-gray-600\">{production.Year}</span>\n      </div>\n    </div>\n  );\n};\n","export const SearchBox = (\n  props: React.InputHTMLAttributes<HTMLInputElement>\n) => {\n  return (\n    <input\n      data-testid=\"search-box\"\n      {...props}\n      className=\"border-2 border-gray-200 rounded-lg p-4 my-4 focus:border-gray-700 transition-colors duration-500\"\n    />\n  );\n};\n","type Props = {\n  children: React.ReactNode;\n};\n\nexport const ErrorBox = ({ children }: Props) => {\n  return (\n    <span\n      className=\"p-4 my-2 border-2 rounded-lg border-red-500 text-red-500\"\n      data-testid=\"error-box\"\n    >\n      {children}\n    </span>\n  );\n};\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { fetchProductions as apiFetchProductions } from './api';\nimport { Layout } from './components/layout';\nimport { LoaderOverlay } from './components/loader';\nimport { ProductionEntry } from './components/production-entry';\nimport { SearchBox } from './components/search-box';\nimport debounce from 'lodash/debounce';\nimport { ErrorBox } from './components/error-box';\nimport { FALLBACK_ERROR_MSG } from './constants';\n\nexport default function App() {\n  const [productions, setProductions] = useState<Array<Production>>([]);\n  const [searchValue, setSearchValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  const fetchProductions = async (searchValue: string) => {\n    try {\n      setErrorMsg(null);\n      if (searchValue.length < 3) {\n        setProductions([]);\n        return;\n      }\n      setIsLoading(true);\n      const { productions } = await apiFetchProductions(searchValue);\n      setProductions(productions);\n    } catch (error) {\n      const errorMessage = error?.message || FALLBACK_ERROR_MSG;\n      setErrorMsg(errorMessage);\n      setProductions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const debouncedFetchProductions = useCallback(\n    debounce(fetchProductions, 500),\n    []\n  );\n\n  const handleSearchBoxChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { value } = event.target;\n    setSearchValue(value);\n    debouncedFetchProductions(value);\n  };\n\n  const hasResults = useMemo(() => !!(productions && productions.length), [\n    productions,\n  ]);\n\n  return (\n    <Layout>\n      <div className=\"flex flex-col\">\n        <SearchBox\n          placeholder=\"Search titles\"\n          value={searchValue}\n          onChange={handleSearchBoxChange}\n        />\n        {isLoading && <LoaderOverlay />}\n        {errorMsg && <ErrorBox>{errorMsg}</ErrorBox>}\n        {!hasResults && !isLoading && !errorMsg && <h1>No titles</h1>}\n        {hasResults &&\n          !isLoading &&\n          productions.map((production) => (\n            <ProductionEntry production={production} key={production.imdbID} />\n          ))}\n      </div>\n    </Layout>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}